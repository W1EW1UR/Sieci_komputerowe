//=========================================================================
/*   SERVER TCP SELECT







*/
//===========================================================================
#include <stdio.h>
#include <stdlib.h> // exit()
#include <string.h> // memset()
#include <arpa/inet.h> // inet_pton()
#include <sys/socket.h>

// Server program
#include <arpa/inet.h>
#include <errno.h>
#include <netinet/in.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
// ==========================================================================

//===========================================================================
// status polaczenia
//===========================================================================

#define CONNSTATE_IDLE 0
#define CONNSTATE_RECEIVING 1
#define CONNSTATE_SENDING 2
#define CONNSTATE_CLOSING 3



//================================================================
// dane Wstępne servera 
//===========================================================================

#define NAME_SIZE 20			
#define SERWER_IP "0.0.0.0" 
int port_number;
struct sockaddr_in serwer;


//===========================================================================
// informacje o polaczeniach  - Struktura połączeń
//===========================================================================

struct conninfo{
   int status;   
   int sock;
   unsigned char name[NAME_SIZE+1];
   unsigned int name_pos;
   int stepcnt;
	int id_client;
	int id_sub_client;   
   
   
   // Odbieranie
   unsigned char recv_buffer[1000];
   unsigned to_recv;
   unsigned char *recv_ptr;   
   
   // Wysylanie
   unsigned char send_buffer[1000];
   unsigned to_send;
   unsigned char *send_ptr;
};


//================================================================
// Ilość połączeń 
//===========================================================================
#define MAX_CONNECTION 4
struct conninfo conn[MAX_CONNECTION];    // Tablica klientów - 20 miejsc na klientów gdzie każde miejsce mówi pewne informacje
													  // jak naprzykład czy dane połączenie/klient czeka na dane czy chce je wysłać
int free_conn = 0, recv_conn = 0, send_conn = 0; // Deklaruje zmienne ilości danych typów połączeń by były gloalne
int id_client=1;








// FUNKCJE I INNE TAKIE



//===========================================================================
// odebrano 1 znak  i - indeks polaczenia  c-odebrany znak
//===========================================================================
void save_name(int i, unsigned char* c)		//zapisujemy nazwe
{
    int j = 0;
    while (conn[i].name_pos < NAME_SIZE) {
        conn[i].name[conn[i].name_pos] = c[j];
        conn[i].name_pos++;
        j++;
    }
}




//===========================================================================
// dodanie nowego polaczenia		fd - deksryptor czyli gniazdo
//===========================================================================
void add_new_conn(int fd,char* name,int main_id,int sub_id)
{
    for (int i=0; i<MAX_CONNECTION; i++)	// Iteruje po wszystkich polaczeniach
    {
        if (conn[i].status == CONNSTATE_IDLE)  // Sprawdza czy stan polaczenia jest "NIEOBECNY"
        {
            bzero(&conn[i],sizeof(conn[i]));		// Czysci miejsce na polaczenie jesli cos zostalo
            
            conn[i].sock = fd;								// Przypisuje gniazdo
            conn[i].status = CONNSTATE_RECEIVING;		// Zmieniamy status polaczenia 
            conn[i].name_pos = 0;    						// Ustawiamy pozycje do nazwy na 0 by mógł zapisać od poczatku
            conn[i].id_client = main_id;
            
				if (name != NULL && strlen(name) > 0)
				{
				    save_name(i, name);
				}          
            
				printf ("Udało sie dodać połączenie\n");
            break;
        }
	 }
}





//===========================================================================
// zamkniecie polaczenia 	i - indeks polaczenia 
//===========================================================================
void close_conn(int i)
{
   close( conn[i].sock );		// Zamykamy polaczenie
   bzero(&conn[i],sizeof(conn[i]));		// Usuwamy je
   conn[i].status = CONNSTATE_IDLE;		// Zmieniamy status na "NIEOBECNY"
}




//===========================================================================
// odebrano 1 znak  i - indeks polaczenia  c-odebrany znak
//===========================================================================
void commands(int i, unsigned char* c)		//Zapisujemy nazwe uzytkownika w tablicy conn[i].name
{
	printf("\033[2J");
	printf("\033[20;0H");
	
	int len = 0;	
	
	
	switch (c[1])
	{
	case 'N':
	printf("\033[19;0H wiadomosc: %s",c);	
	
	char *start = strchr(c, ':');
	char *end = strchr(c, ';');
	size_t length = end - start - 1;
	
	char *wynik = malloc(length + 1);  // +1 na '\0'		//|
	strncpy(wynik, start + 1, end - start - 1);				//|	To jest z chata bo kocham jezyk C
	wynik[length] = '\0';  // Dodajemy null-terminator		//|
	printf("   Wartość : %s",wynik);								//|
	
	save_name(i,wynik);
	free(wynik);														
	break;	

// ==========================================
	
	case 'T':
	printf ("Komenda na utworzenie polaczenia TCP\n");
	
	int new_TCP_socket = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);			//Tworze gniazdo TCP NIEBLOKUJĄCY
	
	conn[i].id_sub_client++;	
	
	add_new_conn(new_TCP_socket,conn[i].name,id_client,conn[i].id_sub_client);
	printf ("koniec procesu dodawnia");
	
	break;	

// ==========================================

	case 'U':
	printf ("Komenda na utworzenie polaczenia UDP\n");
	
	int new_UDP_socket = socket(AF_INET, SOCK_DGRAM , 0);		//Tworze gniazdo UDP
	
	conn[i].id_sub_client++;

	add_new_conn(new_UDP_socket,conn[i].name,id_client,conn[i].id_sub_client);
	
	break;		

// ==========================================

	case 'A':	//aktywne polaczenia
	printf ("Komenda A");

	len = snprintf(conn[i].send_buffer, sizeof(conn[i].send_buffer), "Ilosc aktywnych polaczen: %d", MAX_CONNECTION-free_conn);
	
   send(conn[i].sock, conn[i].send_buffer, len , MSG_NOSIGNAL);  // Wysyłąnie danych
   
	printf("\nSend: %s  \n", conn[i].send_buffer); // DEBUG - DEBUG - DEBUG - DEBUG - DEBUG - DEBUG     

	
	break;	

// ==========================================
	
	case 'F': //Wolne polaczenia
	printf ("Komenda F");
	
	len = snprintf(conn[i].send_buffer, sizeof(conn[i].send_buffer), "Ilosc wolnych polaczen: %d", free_conn);
	
	send(conn[i].sock, conn[i].send_buffer, len , MSG_NOSIGNAL);  // Wysyłąnie danych
   
   printf("\n: %s  \n", conn[i].send_buffer); // DEBUG - DEBUG - DEBUG - DEBUG - DEBUG - DEBUG     

   
	break;

	}
}




//===========================================================================
// nie odebrano �adnego znaku
//===========================================================================
void recv_zero(int i)
{
	sprintf(conn[i].send_buffer,"Nic nie odebrano "); // zapisuje w bufforze ze nic nie odebrano
}







//===========================================================================
// wyslano  1 znak, - reakcja gdy send zwrocil 1
//===========================================================================
void send_char(int i) 
{
  if (conn[i].to_send>0) // Sprawdza czy zostalo cos jeszcze do wyslania
  {
      conn[i].to_send--;	// ? nie wiem
      conn[i].send_ptr++;
  }
}









//=============================================================================================================================
// glowna petla
//===========================================================================
int main(int argc, char *argv[])
{
	fd_set readfds, writefds; // fd_set - to struktura || Zmienne read i write(fds) są tworzone na podstawie 
	int maxfd;					  // maxfd - mówi ile jest Klientów obecnie.




	 // Czyszcimy dane Servera (gdyby jakieś były) oraz czyścimy tablice klientów (gdyby byli by zapisani klienci widmo)  
    bzero((char*) &serwer,sizeof(serwer));
    bzero((char*) &conn,sizeof(conn));


    
    
	 // Sprawdzamy ile argumentow podano z lini komend   || Obsługa błędów 
    if (argc<2){
        perror(" nie podano portu\n");
        exit(19);
    }
    
    
    port_number = atoi(argv[1]);    // Numer portu konwertowany z STRING na INT  (ASCII to INT)
    serwer.sin_family = AF_INET,		// Typ IP
    serwer.sin_port = htons(port_number);		// Numer portu konewrtowany z INT na typ "SIECIOWY" (HOST to NETWORK short)
    
    
        
	 int retval = inet_pton( AF_INET, SERWER_IP, & serwer.sin_addr );    // Konwertuje IP na BINARNY
    
    if( retval <= 0 ) // Obsługa błędów 
    {
        perror( "inet_pton() ERROR" );
        exit( 1 );
    }



   
	 int listen_sock = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0); // Tworze Socket 
	 																		// AF_INET - Typ IPv4
	 																		// SOCK_STREAM - Typ protokołu | Dla TCP 
	 																		// SOCK_NONBLOCK - Flaga | Nieblokujący 
	 																		// 0 - Protokół | Niech system sam se wybierze co pasuje
    if(( listen_sock ) < 0 ) 			// Obługa błędów
    {
        perror( "socket() ERROR" );
        exit( 2 );
    }
   
   
   
   
   
   
   
   
    socklen_t len = sizeof( serwer ); 	// Długość adresu SERVERA
    
	 retval = bind( listen_sock,(struct sockaddr *) &serwer, len ); // Przypisuje gniazdo Servera do portu i adresu servera
    																		// listen_sock - gniazdo które chcemy przypisać
    																		// (struct sockaddr *) &serwer - adres servera
    																		// len - długość adresu servera 
    																		
    if( retval < 0 ) // Obsługa błędu		
    {
        perror( "bind() ERROR" );
        exit( 3 );
    }






	 retval = listen( listen_sock,20); // Ustawiam socket na nasłuchiwanie i mówie że maxymalnie może obejmować 20 połączeń

    if( retval < 0 ) // Obsługa błędu
    {
        perror( "listen() ERROR" );
        exit( 3 );
    }


// ====================================================================
// Wyrzucilem przed petle bo tak
// ====================================================================
















   
   printf("\033[2J");	// czyszcze ekran przed petla
   
// =====================================================================================================================
// GLOWNA PETLA
// ====================================================================
   
    while (1)
{
	

FD_ZERO(&readfds);		// Zerowanie zbioru dla gniazd do odczytu
FD_ZERO(&writefds);		// Zerowanie zbioru dla gniazd do zapisu
maxfd = listen_sock;		// Ustawienie maxfd na gniazdo nasłuchujące (Ta zmienna w skrócie mówi ile jest obecnie połączeń)

    // Dodaj gniazdo nasłuchujące do zbioru read
    FD_SET(listen_sock, &readfds);					// Dodaje gniazdo nasłuchujące do zbioru readfds bo select będzie sprawdzał
    															// właśnie w tym zbiorze a dokłądniej na tym listen_sock czy ktoś sie nie 
    															// chce dobić do nas
 
 
 
	 // Ustawienie timeout'u by select nie czekał wieczność
    struct timeval timeout;
    timeout.tv_sec = 0;			// 0s
    timeout.tv_usec = 100000; // 100ms timeout   












// ====================================================================
// Segregacja połączeń
// ====================================================================

    // Dodaj aktywne połączenia do zbiorów
    for (int i = 0; i < MAX_CONNECTION; i++)
    {

		  //  Jeśli połączenie jest gotowe do odbioru danych
        if (conn[i].status == CONNSTATE_RECEIVING)		// CONNSTATE_RECEIVING - Stan odbierający
        {
            FD_SET(conn[i].sock, &readfds); // dodaje połączenie/gniazdo do readfds
            if (conn[i].sock > maxfd)
                maxfd = conn[i].sock; // Jeśli to jest najnowsze połączenie to mówimy o tym maxfd by wiedział ile jest połączeń
        }
        
        
		  //  Jeśli połączenie jest gotowe do wysłania danych        
        else if (conn[i].status == CONNSTATE_SENDING)   // CONNSTATE_SENDING - Stan wysyłający
        {
            FD_SET(conn[i].sock, &writefds);	// dodajemy połączenie/gniazdo do writefds 
            if (conn[i].sock > maxfd)
                maxfd = conn[i].sock;	// podobnie jak wyżej
        }
    }


// ====================================================================
// ====================================================================



	 
    int activity = select(maxfd + 1, &readfds, &writefds, NULL, &timeout);  //Serce programu - SELECT
																		// maxfd + 1 - Sprawdzamy do Najwiekszego deskryptorora + 1 bo to nie >=
																		// Zbiór gniazd do odczytywania daynych
																		// Zbiór gniazd do wysyłania danych

    if (activity < 0)    // Obsługa błędu
    {
        perror("select() ERROR");
        continue;
    }


    if (FD_ISSET(listen_sock, &readfds))// Sprawdz czy jest nowe połączenie
    {
    	  // Akceptuje połączenie jeśli jakieś jest
        int newsock = accept(listen_sock, NULL, NULL);
        if (newsock >= 0)
        {
        		// Dodaje nowe połączenie
            add_new_conn(newsock,NULL,id_client,0);
				id_client++;        
        }
    }







	printf("\033[1;0H");

    // Lecimy po wszystkich połączeniach i sie nimi zajmujemy
    for (int i = 0; i < MAX_CONNECTION; i++)
    {



        if (conn[i].status == CONNSTATE_RECEIVING && FD_ISSET(conn[i].sock, &readfds)) // KLIENT "WYSYLA" 
        {
        	
            unsigned char c; // Zmienna do odbierania
            int retval = recv(conn[i].sock, conn[i].recv_buffer, sizeof(conn[i].recv_buffer), 0); // Odbieranie od połączenia wiadomości 1 znaku do zmiennej 'c'|| 0-flaga
             
            
            if (retval > 0)
            {
            	 printf("Recv: %d  Wiadomosc: %s \n", retval,conn[i].recv_buffer); // DEBUG - DEBUG - DEBUG - DEBUG - DEBUG - DEBUG   
            	 
                printf("Wartosć :");
                commands(i, conn[i].recv_buffer); // Funkcja || Pobiera indeks połączenia i bit wiadomości ze zmiennej c
            }
            else
                recv_zero(i);		// Funkcja || Pobiera indeks połączenia i bit wiadomości ze zmiennej c
        }
        
        
        
        	
        
        
        
        
     
        else if (conn[i].status == CONNSTATE_SENDING && FD_ISSET(conn[i].sock, &writefds))	// KLIENT "ODBIERA"
        {
        	
            int retval = send(conn[i].sock, conn[i].send_buffer, sizeof(conn[i].send_buffer), MSG_NOSIGNAL);  // Wysyłąnie danych         
            
            printf("\033[2J");
				printf("\033[20;0H");
				printf("GŁÓWNA PĘTLA      ");  
				printf("\nSend: %d  \n", retval); // DEBUG - DEBUG - DEBUG - DEBUG - DEBUG - DEBUG                 
         
        }



        else if (conn[i].status == CONNSTATE_CLOSING)   // No jak połączenie chce sie zamknąć to niech sie zamknie
        {
        		printf("\nZamknieto polaczenie: %d", i); // DEBUG - DEBUG - DEBUG - DEBUG - DEBUG - DEBUG  
            close_conn(i);
        }
    
    }


	
	
	
	
	
// ====================================================================
// DEKORACJA
// ====================================================================	
	
    free_conn = 0, recv_conn = 0, send_conn = 0; // Zeruje wartości bo bez tego będą szły w nieskończoność
    
    
    for (int i = 0; i < MAX_CONNECTION; i++) // Zaczynam iterować po połączeniach
    {
        switch (conn[i].status) // jako wartość SWITCHA to stan połączenia
        {
            case CONNSTATE_IDLE: 		free_conn++; 	break;       // Jeśli jest wolne to dodaje +1
            case CONNSTATE_RECEIVING:	recv_conn++; 	break; 		 // Jeśli jest odbierajace to dodaje +1
            case CONNSTATE_SENDING: 	send_conn++; 	break;   	 // Jeśli jest wysyłajace to dodaje +1
        }
        printf("\033[%d;15H		\nNazwa uzytkownika: %s \033[35Gid: %d %d \n",i+1,conn[i].name,conn[i].id_client,0); 
    }

    static int loopnr = 0;  // Ile razy sie cały pogram wykonał
    
    // Dekoracja
 	      
    printf("\033[0;0H");
    printf("connections: sending: %d  receiving: %d   free: %d     %d \r", send_conn, recv_conn, free_conn, loopnr++);
    usleep(1000000); // Nie wykonuje sie z prędkością procesora tylko co 5 sekund chyba albo 0.5 albo 0.05													// usleep(1000000) = 1 sekunda
    
}
}


